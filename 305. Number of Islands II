URL: https://leetcode.com/problems/number-of-islands-ii/

class Solution {
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        List<Integer> ans = new ArrayList<>();
        int[][] dirs = {{1,0}, {0,-1}, {-1,0}, {0,1}};

        int[] par = new int[m*n];
        int[] rank = new int[m*n];
        Arrays.fill(par, -1);

        int count = 0;
        for(int i=0; i < positions.length; i++) {
          int row = positions[i][0];
          int col = positions[i][1];

          int cellno = row * n + col;
          if(par[cellno] != -1) {
              ans.add(count);
              continue;
          }
          par[cellno] = cellno;
          rank[cellno] = 1;
          count++;//islands increase

          for(int[] dir: dirs) {
              int rowdash = row + dir[0];
              int coldash = col + dir[1];
              int celldash = rowdash * n + coldash;

              if(rowdash < 0 || coldash < 0 || rowdash >= m || coldash >= n || par[celldash] == -1) {
                  continue;
              }

              int lx = find(cellno, par);
              int ly = find(celldash, par);

              if(lx != ly) {
                  if(rank[lx] > rank[ly]) {
                      par[ly] = lx;
                  }else if(rank[lx] < rank[ly]) {
                      par[lx] = ly;
                  }else {
                      par[lx] = ly;
                      rank[ly]++;
                  }
                  count--;//because merged, so islands decrease
              }

          }
          ans.add(count);
        }
        return ans;
    }
    
    public static int find(int x, int[] par) {
        if(par[x] == x)
        return x;

        return (par[x] = find(par[x], par));
    }
}
