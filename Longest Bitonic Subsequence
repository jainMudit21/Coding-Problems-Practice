URL: https://practice.geeksforgeeks.org/problems/longest-bitonic-subsequence0824/1#

Explanation:
If you have done Longest Increasing Subsequence problem, then it will be fairly straightforward for you. If not, check out that problem first because this one is just extension of LIS.

Problem: Now the task is to find Increasing and decreasing subsequence. You can notice that it is fairly simple to calculate individually LIS or LDS (decreasing).
So, why not just do that and think about complexity later on.
As of now, you have 2 arrays (1 for increasing and other for decreasing).
Basically, you have information of length of both increasing and decreasing at a particular element.
So now, you just need to add them up and calculate the max.

/* Most people would like to implement it in a single function, but I am a follower of clean coding and so are companies with coding culture. There is nothing bad
that can happen with 2 more functions which can help in reading the code beautifully. */


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        
        int arr[] = new int[n];
        for(int i = 0; i<n; i++) {
            arr[i] = sc.nextInt();
        }
        
        System.out.println(bts(arr));
    }
    
    public static int bts(int arr[]) {
        int n = arr.length;
        if(n == 0 || n == 1)
            return n;
        
        int lis[] = lis(arr, n);
        int lds[] = lds(arr, n);
        
        // System.out.println(Arrays.toString(lis));
        // System.out.println(Arrays.toString(lds));
        
        return helper(lis, lds);
    }
    
    public static int[] lis(int arr[], int n) {
        int temp[] = new int[n];
        
        for(int i = 0; i < n; i++) {
            int max = 0;
            
            for(int j = 0; j < i; j++) {
                if(arr[i] >= arr[j]) {
                    max = Math.max(max, temp[j]);
                }
            }
            temp[i] = (max == 0) ? 1 : max + 1;
        }
        
        return temp;
    }
    
    public static int[] lds(int arr[], int n) {
        int temp[] = new int[n];
        
        for(int i = n-1; i >= 0; i--) {
            int max = 0;
            
            for(int j = n-1; j > i; j--) {
                if(arr[i] >= arr[j]) {
                    max = Math.max(max, temp[j]);
                }
            }
            temp[i] = (max == 0) ? 1 : max + 1;
        }
        
        return temp;
    }
    
    public static int helper(int lis[], int lds[]) {
        int max = 0;
        for(int i=0; i<lis.length; i++) {
            int temp = lis[i] + lds[i] - 1;
            max = Math.max(temp, max);
        }
        
        return max;
    }

}
