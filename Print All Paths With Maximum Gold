URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/dynamic-programming/goldmine-re-official/ojquestion#


import java.io.*;
import java.util.*;

public class Main {

   private static class Pair {
      String psf;
      int i;
      int j;

      public Pair(String psf, int i, int j) {
         this.psf = psf;
         this.i = i;
         this.j = j;
      }
   }
   
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      int n = Integer.parseInt(br.readLine());
      int m = Integer.parseInt(br.readLine());
      int[][] arr = new int[n][m];

      for (int i = 0; i < n; i++) {
         String str = br.readLine();
         for (int j = 0; j < m; j++) {
            arr[i][j] = Integer.parseInt(str.split(" ")[j]);
         }
      }

      //write your code here
      int dp[][] = new int[n][m];
      int ans = 0;
      int ind = 0;
      for(int j = m-1; j >= 0 ; j--) {
          for(int i = 0; i < n; i++) {
              
              if(j == m-1) {
                  dp[i][j] = arr[i][j];
              }else {
                  
                  int val1 = 0;
                  int val2 = dp[i][j+1];
                  int val3 = 0;
                  if(i-1 >= 0) {
                      val1 = dp[i-1][j+1];
                  }
                  if(i+1 < n) {
                      val3 = dp[i+1][j+1];
                  }
                  dp[i][j] = Math.max(Math.max(val1, val2), val3) + arr[i][j];
              }
              
              if(j == 0) {
                  ans = Math.max(ans, dp[i][j]);
              }
          }
      }
      
      System.out.println(ans);
      Queue<Pair> q = new LinkedList<Pair>();
      for(int i = 0; i < n; i++) {
          if(dp[i][0] == ans) {
              q.add(new Pair(i+"", i, 0));
          }
      }
      
      while(!q.isEmpty()) {
          Pair p = q.remove();
          if(p.j == m-1) {
              System.out.println(p.psf);
              continue;
          }
          
          int val = dp[p.i][p.j] - arr[p.i][p.j];
          if(p.i-1 >= 0 && dp[p.i-1][p.j+1] == val) {
              q.add(new Pair(p.psf +" d1", p.i-1, p.j+1));
          }
          if(dp[p.i][p.j+1] == val) {
              q.add(new Pair(p.psf +" d2", p.i, p.j+1));
          }
          if(p.i+1 < n && dp[p.i+1][p.j+1] == val) {
              q.add(new Pair(p.psf +" d3", p.i+1, p.j+1));
          }
      }
      
   }


}
