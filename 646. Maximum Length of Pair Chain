URL: https://leetcode.com/problems/maximum-length-of-pair-chain/


Sorting on the Basis of 2nd index. Think about it. Why everyone is sorting on 1st index? to use LIS (which is n^2). 
If sorting on 1st index:

traversing the array and asking every element before curr if it(curr) can be appended to previous ans.

If we sort on 2nd index, then the answer list will contain 1st element of sorted array. It cannot proceed without including it. 
(because all the elements in the sorted array will have 2nd index greater than it).
Therefore, its just simple O(n) after sorting.


class Solution {
    public int findLongestChain(int[][] pairs) {
        
        Arrays.sort(pairs, (a, b) -> { return a[1]-b[1]; });
        
        int dp[] = new int[pairs.length];
        
        dp[0] = 1;
        int ans = 1;
        
        int min = pairs[0][1];
        for(int i = 1; i < pairs.length; i++) {
            
            if(pairs[i][0] > min) {
                min = pairs[i][1];
                ans++;
            }
        }
        
        return ans;
        
    }
}
