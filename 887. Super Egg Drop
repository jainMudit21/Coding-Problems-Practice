URL: https://leetcode.com/problems/super-egg-drop/

public int superEggDrop(int e, int f) {
        int dp[][] = new int[e+1][f+1];
        
        for(int i=1; i <= e; i++) {
            for(int j=1; j<= f; j++) {
                if(i == 1) {
                    dp[i][j] = j;
                }else if(j == 1) {
                    dp[i][j] = 1;
                }else {
                    int min = Integer.MAX_VALUE;
                    for(int mj = j-1, pj=0; mj >= 0; mj--, pj++) {
                        int v1 = dp[i][mj]; //egg survives
                        int v2 = dp[i-1][pj]; //egg breaks
                        min = Math.min(min, Math.max(v1, v2));
                    }
                    dp[i][j] = min + 1;
                }
            }
        }
        

        return dp[e][f];
    }



//Sub-optimal solution
class Solution {
    HashMap<String, Integer> memo = new HashMap<>();
    int superEggDrop(int K, int N) {
        if(K == 1) return N;
        if(N == 0) return 0;

        if(memo.containsKey(K + " " + N)){
            return memo.get(K + " " + N);
        }
        int ans = Integer.MAX_VALUE;
        //We don't know which floor has the best answer. So, we will try 1 to N floors and get min value.
        for(int i = 1; i <= N; i++){
            //In the worst case to know what F is with certainty, we need to get the max result
            int cur = Math.max(
                //if egg broken, we have K-1 eggs, and we start to search floor 1 to i - 1
                superEggDrop(K - 1, i - 1),
                //if egg is good, we still have K eggs, and we start to search floor i+1 to N
                superEggDrop(K, N - i)
            ) + 1;//+1 because we just throw egg at floor i
            ans = Math.min(ans, cur);
        }
        memo.put(K + " " + N, ans);
        return ans;
    }
}



//Optimal solution
class Solution {
    int superEggDrop(int K, int N) {
        int[][] memo =  new int[K+1][N+1];
        return dp(K,N,memo);
    }
    int dp(int k,int n,int[][] memo){
        if(n==0) return 0;
        if(k==1) return n;
        if(memo[k][n]!=0) return memo[k][n];
        
        int ans=n;
        int lo=1;
        int hi=n;
		
        while(lo<=hi){
            int mid=(hi-lo)/2+lo;

            int left=dp(k-1,mid-1,memo); //if the egg brokes at ith floor
            int right=dp(k,n-mid,memo); //the egg not brokes at ith floot
             
            ans=Math.min(ans,Math.max(left,right)+1);
            
            //here is the trick
            //when we find the answer, all the floors under it, the eggs will not be broken.
            //when the floors upper to it, the eggs will be broken. 
            //So, we need to check each floor, they are same steps.
            if(left==right) break; 
            else if(left<right) lo=mid+1;
            else hi=mid-1;
        }

        memo[k][n]=ans;
        
        return ans; 
    }
}
