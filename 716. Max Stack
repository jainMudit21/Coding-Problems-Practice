URL: https://leetcode.com/problems/max-stack/

//O(n) Approach

class MaxStack {

    Stack<Integer> data, max;

    public MaxStack() {
        data = new Stack<>();
        max = new Stack<>();
    }

    public void push(int x) {
        data.push(x);
        int m = x;
        if(max.size() > 0)
            m = Math.max(m, max.peek());
        max.push(m);
    }

    public int pop() {
        max.pop();
        return data.pop();
    }

    public int top() {
      return data.size() > 0 ? data.peek() : -1;
    }

    public int peekMax() {
      return max.size() > 0 ? max.peek() : -1;
    }

    public int popMax() {
        int tbr = max.peek(); //to be removed
        Stack<Integer> buffer = new Stack<>();
        while(data.peek() != tbr) {
            int res = pop();
            buffer.push(res);
        }
        pop();
        
        while(buffer.size() > 0) {
            int res = buffer.pop();
            push(res);
        }
        
        
        return tbr;
    }
    
}    



