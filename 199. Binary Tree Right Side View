URL: https://leetcode.com/problems/binary-tree-right-side-view/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if(root == null) {
 	 	     return new ArrayList<Integer>();
 	 	 }
 	 	 
         List<Integer> list = new ArrayList<>();
 	 	 LinkedList<TreeNode> que = new LinkedList<>();
 	 	 que.add(root);
 	 	 
 	 	 while(que.isEmpty() == false) {
 	 	     int size = que.size();
 	 	     
 	 	     while(size-- > 0) {
 	 	         TreeNode rem = que.removeFirst();
 	 	         if(rem.left != null) {
 	 	             que.add(rem.left);
 	 	         }
 	 	         if(rem.right != null) {
 	 	             que.add(rem.right);
 	 	         }
                 
                 if(size == 0) {
                     list.add(rem.val);
                 }
 	 	     }
 	 	 }
        
        return list;
    }
}
