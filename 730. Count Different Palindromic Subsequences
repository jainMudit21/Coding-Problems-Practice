URL: https://leetcode.com/problems/count-different-palindromic-subsequences/

class Solution {
    public int countPalindromicSubsequences(String s) {
        int n = s.length();
	   int dp[][] = new int[n][n];
	   
	   int next[] = new int[n];
	   int prev[] = new int[n];
	   HashMap<Character, Integer> map = new HashMap<>();
	   
	   for(int i = 0; i < n; i++) {
	       char c = s.charAt(i);
	       if(!map.containsKey(c)) {
	           prev[i] = -1;
	       }else {
	           prev[i] = map.get(c);
	       }
	       
	       map.put(c, i);
	   }
	   map.clear(); //Dont forget to clear the map
	   
	   for(int i = n-1; i >= 0; i--) {
	       char c = s.charAt(i);
	       if(!map.containsKey(c)) {
	           next[i] = -1;
	       }else {
	           next[i] = map.get(c);
	       }
	       
	       map.put(c, i);
	   }
	   
	   for(int g = 0; g < n; g++) {
	       for(int i = 0, j = g; j < n; i++, j++) {
	           if(g == 0) {
	               dp[i][j] = 1;
	           }else if(g == 1) {
	               dp[i][j] = 2;
	           }else {
	               char c1 = s.charAt(i);
	               char c2 = s.charAt(j);
	               
	               if(c1 == c2) {
	                   //3 cases => 1. mid part doesn't contain same character
	                   if(next[i] > prev[j]) {
	                       dp[i][j] = 2*dp[i+1][j-1] + 2;
	                   }else if(next[i] == prev[j]) { //2. exactly 1 occurence
	                       dp[i][j] = 2*dp[i+1][j-1] + 1;
	                   }else {
	                       dp[i][j] = 2* dp[i+1][j-1] - dp[next[i]+1][prev[j]-1];
	                   }
	               }else {
	                   dp[i][j] = dp[i][j-1] + dp[i+1][j] - dp[i+1][j-1];
	               }
	           }
               
               dp[i][j] = (dp[i][j] < 0)  ? (dp[i][j] + 1000000007) : (dp[i][j] % 1000000007);
	       }
	   }
	   
	   return dp[0][n-1];
    }
}

