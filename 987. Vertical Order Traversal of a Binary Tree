URL: https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        
        if(root == null)    return list;
        
        int minMax[] = new int[2];
        width(root, 0, minMax);
        
        int len = minMax[1] - minMax[0] + 1;
        
        for(int i =0;i < len; i++) {
            list.add(new ArrayList<>());
        }
        PriorityQueue<vpair> parQ = new PriorityQueue<>((a,b) -> {
            return a.node.val - b.node.val;
            });
            
        PriorityQueue<vpair> chQ = new PriorityQueue<>((a,b) -> {
            return a.node.val - b.node.val;
            });
        
        
        parQ.add(new vpair(root, Math.abs(minMax[0])));
        
        while(parQ.size() != 0) {
            
            int size = parQ.size();
            
            while(size-- > 0) {
                
                vpair rp = parQ.remove();
                TreeNode node = rp.node;
                int hl = rp.hl;
                
                list.get(hl).add(node.val);
                
                if(node.left != null)   chQ.add(new vpair(node.left, hl - 1));
                if(node.right != null)   chQ.add(new vpair(node.right, hl + 1));
                
                
            }
            
            PriorityQueue<vpair> temp = parQ;
            parQ = chQ;
            chQ = temp;
        }
        
        return list;
        
    }
    
    public class vpair {
        TreeNode node;
        int hl;
        
        vpair(TreeNode node, int hl) {
            this.node = node;
            this.hl = hl;
        }
    }
    
    public void width(TreeNode node, int lvl, int ans[]) {
        
        if(node == null) return;
        
        ans[0] = Math.min(ans[0], lvl);
        ans[1] = Math.max(ans[1], lvl);
        
        width(node.left, lvl - 1, ans);
        width(node.right, lvl + 1, ans);
    }
    
}
