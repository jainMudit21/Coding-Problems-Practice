URL: https://www.geeksforgeeks.org/count-pairs-two-sorted-matrices-given-sum/

URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/hashmap-and-heaps/pairs-with-given-sum-in-two-sorted-matrices-official/ojquestion


import java.util.*;

public class Main {
	
    public static int solve(int[][] num1, int[][] num2, int k) {
		
		HashMap<Integer, Integer> map = new HashMap<>();
		for(int i=0; i < num1.length; i++) {
		    for(int j=0; j < num1[0].length; j++) {
		        
		        map.put(num1[i][j], map.getOrDefault(num1[i][j], 0) + 1);
		    }//for(int j=0; j < num1[0].length; j++)
		}//for(int i=0; i < num1.length; i++)
		
		int count = 0;
		
		for(int i=0; i < num2.length; i++) {
		    for(int j=0; j < num2[0].length; j++) {
		        
		        int val = num2[i][j];
		        int comp = k - val;
		        
		        if(map.containsKey(comp)) {
		            count += map.get(comp);
		        }
		    }//for(int j=0; j < num2[0].length; j++)
		}//for(int i=0; i < num2.length; i++)
		
		
		return count;
	}//public static int solve(int[][] num1, int[][] num2, int k)

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int[][] mat1 = new int[N][N];
		for (int i = 0; i < mat1.length; i++) {
			for (int j = 0; j < mat1[0].length; j++) {
				mat1[i][j] = sc.nextInt();
			}
		}

		int[][] mat2 = new int[N][N];
		for (int i = 0; i < mat2.length; i++) {
			for (int j = 0; j < mat2[0].length; j++) {
				mat2[i][j] = sc.nextInt();
			}
		}
		int K = sc.nextInt();
		System.out.println(solve(mat1, mat2, K));

	}

}
