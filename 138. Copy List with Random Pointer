URL: https://leetcode.com/problems/copy-list-with-random-pointer/

//GeeksForGeeks
URL: https://practice.geeksforgeeks.org/problems/clone-a-linked-list-with-next-and-random-pointer/1#

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        HashMap<Node, Node> map = new HashMap<>();
        Node curr = head;
        
        Node nhead = new Node(-1);
        Node prev = nhead;
        
        //copy normal list with next pointers
        while(curr != null) {
            prev.next = new Node(curr.val);
            
            map.put(curr, prev.next);
            
            prev = prev.next;
            curr = curr.next;
        }
        
        nhead = nhead.next;
        Node c1 = head;
        Node c2 = nhead;
        
        while(c2 != null) {
            c2.random = (c1.random != null) ? map.get(c1.random) : null;
            
            c1 = c1.next;
            c2 = c2.next;
        }
        
        return nhead;
    }
}




// O(1) space optimized
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) {
            return null;
        }
        
        
        copyLL(head);
        copyRandPoint(head);
        return extractList(head);
    }
    
    public void copyLL(Node head) {
        
        Node curr = head;
        
        while(curr != null) {
            Node forw = curr.next;
            
            Node temp = new Node(curr.val);
            curr.next = temp;
            temp.next = forw;
            
            curr = forw;
        }
        
    }
    
    
    public void copyRandPoint(Node head) {
        
        Node curr = head;
        
        while(curr != null) {
            
            Node rand = curr.random;
            
            if(rand != null)
                curr.next.random = rand.next;
            
            curr = curr.next.next;
        }
        
    }
    
    
    public static Node extractList(Node head) {
        
        Node dummy = new Node(-1);
        Node prev = dummy;
        Node curr = head;
        
        while(curr != null) {
            
            prev.next = curr.next;
            curr.next = curr.next.next;
            
            prev = prev.next;
            curr = curr.next;
        }
        
        return dummy.next;
    }
}
