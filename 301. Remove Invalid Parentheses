URL: https://leetcode.com/problems/remove-invalid-parentheses/
URL: https://www.geeksforgeeks.org/remove-invalid-parentheses/

//Solution Recursive

class Solution {
    public List<String> removeInvalidParentheses(String s) {
        
        int mr = getMin(s);
        Set<String> set = new HashSet<>();
        
        Set<String> oneMoreHS = new HashSet<>();
        solution(s, mr, set, oneMoreHS);
        
        
        return new ArrayList<String>(set);
    }
    
   List<String> list = new ArrayList<>();
    
   public void solution(String str, int minRemoval, Set<String> ans, Set<String> oneMoreHS) {
		//write your code here
		if(minRemoval == 0) {
		    if(getMin(str) == 0) {
		        //valid ans
		        //check duplicacy
		        if(!ans.contains(str)) {
		            ans.add(str);
		        }
		    }
		    return;
		}
		
		for(int i=0; i < str.length(); i++) {
		    if(str.charAt(i) != '(' && str.charAt(i) != ')') {
                continue;
            }
            
		    String left = str.substring(0, i);
		    String right = str.substring(i + 1);
		    if(oneMoreHS.contains(left+right)) {
          continue;
        }
        oneMoreHS.add(left + right);
            
		    solution(left + right, minRemoval-1, ans, oneMoreHS);
		}
		
		return;
	}
    
   public int getMin(String str){
		//write your code here
		Stack<Character> st = new Stack<>();
		
		for(int i=0; i < str.length(); i++) {
		    char ch = str.charAt(i);
		    if(ch == '(') {
		        st.push(ch);
		    }else if(ch == ')') {
		        if(st.size() == 0) {
		            st.push(ch);
		        }else if(st.peek() == ')') {
		            st.push(ch);
		        }
		        else if(st.peek() == '(') {
		            st.pop();
		        }
		    }
		}
		
		return st.size();
	}

}
