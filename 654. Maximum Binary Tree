/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        int partition = findMax(nums);
        
        TreeNode root = divCon(nums, partition);
        
        return root;
    }
    
    public int findMax(int arr[]) {
        int index = 0;
        int max = arr[0];
        for(int i = 1; i < arr.length; i++) {
            if(max < arr[i]) {
                index = i;
                max = arr[i];
            }
        }
        
        return index;
    }
    
    public TreeNode divCon(int arr[], int index) {
        
        if(arr.length == 1) {
            TreeNode node = new TreeNode(arr[index]);
            return node;
        }
        
        
        int r[] = new int[arr.length - index - 1];
        int l[] = new int[arr.length - r.length - 1];
        
        for(int i = 0; i < index; i++) {
            
            l[i] = arr[i];
        }
        
        for(int j = index+1; j < arr.length; j++) {
            
            r[j-index-1] = arr[j];
        }
        
        TreeNode mainNode = new TreeNode(arr[index]);
        
        if(l.length != 0) {
            
            int part = findMax(l);
            TreeNode node = divCon(l, part);
            mainNode.left = node;
            
        }
        
        if(r.length != 0) {
            
            int part = findMax(r);
            TreeNode node = divCon(r, part);
            mainNode.right = node;
        }
        
        return mainNode;
        
        
        
        
    
    }
}
