URL: https://leetcode.com/problems/meeting-rooms-ii/

public int meetingRooms(int intervals[][]) {
      
      Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
      
      PriorityQueue<Integer> pq = new PriorityQueue<>();
      
      for(int interval[] : intervals) {
          
          if(pq.size() == 0) {
              pq.add(interval[1]);
          }else {
              if(pq.peek() > interval[0]) {
                  pq.add(interval[1]);
              }else {
                  pq.remove();
                  pq.add(interval[1]);
              }
          }
          
      }
      
      return pq.size();
      
}



//new solution
public int meetingRooms(int intervals[][]) {
      
      int[] st = new int[intervals.length], ed = new int[intervals.length];
      
      for(int i=0; i < intervals.length; i++) {
          
          st[i] = intervals[i][0];
          ed[i] = intervals[i][1];
          
      }
      
      Arrays.sort(st);
      Arrays.sort(ed);
      
      int i = 0, j = 0;
      int count = 0;
      
      while(i < st.length && j < ed.length) {
          if(st[i] < ed[j]) {
              i++;
              count++;
          }else {
              i++;
              j++;
          }
      }
      
      return count;
      
}
