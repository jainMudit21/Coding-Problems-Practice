URL: https://leetcode.com/problems/reorder-list/

URL: https://practice.geeksforgeeks.org/problems/reorder-list/1#

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        
        if(head == null || head.next == null) {
            return;
        }
        
        ListNode mid = midNode(head);
        ListNode nhead = mid.next;
        mid.next = null;
        
        nhead = reverse(nhead);
        
        ListNode c1 = head;
        ListNode c2 = nhead;
        ListNode f1 = null;
        ListNode f2 = null;
        
        //can use only c2!=null in while condition
        while(c1 != null && c2 != null) {
            
            //create backup
            f1 = c1.next;
            f2 = c2.next;
            
            //Links
            c1.next = c2;
            c2.next = f1;
            
            //Move to next
            c1 = f1;
            c2 = f2;
        }
    }
    
    public ListNode reverse(ListNode head) {
        
        if(head == null || head.next == null) {
            return head;
        }
        
        ListNode curr = head;
        ListNode prev = null;
        ListNode forw = null;
        
        while(curr != null) {
            forw = curr.next;
            
            curr.next = prev;
            prev = curr;
            curr = forw;
            
        }
        
        return prev;
    }
    
    public ListNode midNode(ListNode head) {
    
        if(head == null || head.next == null) {
            return head;
        }
        
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        
        return slow;
    }
}
