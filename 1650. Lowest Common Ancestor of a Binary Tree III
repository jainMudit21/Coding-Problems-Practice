URL: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
};
*/

class Solution {
    public Node lowestCommonAncestor(Node p, Node q) {
        
        HashSet<Node> hs = new HashSet<>();
        nodeToRootPath(p, hs);
        if(hs.size() == 0)
            return null;
        
        return find(q, hs);
        
    }
    
    Node find(Node q, HashSet<Node> hs) {
        
        if(q == null) {
            return null;
        }
        
        if(hs.contains(q)) {
            return q;
        }
        
        return find(q.parent, hs);
        
    }
    
    void nodeToRootPath(Node p, HashSet<Node> hs) {
        if(p == null) {
            return;
        }
        
        hs.add(p);
        nodeToRootPath(p.parent, hs);
    }
}
