URL: https://leetcode.com/problems/3sum/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        return threeSum(nums, 0);
    }
    
    List<List<Integer>> threeSum(int[] arr, int target) {
      
      List<List<Integer>> list = new ArrayList<>();
      int n = arr.length;
      if(n < 3) {
          return list;
      }
      Arrays.sort(arr);
    //   System.out.println(Arrays.toString(arr));
      
      for(int i=0; i <= n - 3; i++) {
          if(i != 0 && arr[i] == arr[i-1]) {
              continue;
          }
          
          int targ = target - arr[i];
          
          List<List<Integer>> subRes = twoSum(arr, i + 1, n-1, targ);
          
        //   System.out.println(subRes);
          
          for(List<Integer> li: subRes) {
              li.add(arr[i]);
              list.add(li);
          }
          
        //   System.out.println(list);
          
      }
      
      return list;
  }
    
    List<List<Integer>> twoSum(int[] arr, int si, int ei, int target) {
      
      int left = si;
      int right = ei;
      
      List<List<Integer>> res = new ArrayList<>();
      while(left < right) {
          if(left != si && arr[left] == arr[left - 1]) {
              left++;
              continue;
          }
          
          int sum = arr[left] + arr[right];
          
          if(sum == target) {
              List<Integer> sub = new ArrayList<>();
              sub.add(arr[left]);
              sub.add(arr[right]);
              res.add(sub);
              left++;
              right--;
          }else if(sum > target) {
              right--;
          }else {
              left++;
          }
      }
      
      return res;
      
  }
}
