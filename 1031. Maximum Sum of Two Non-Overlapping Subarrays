URL: https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/

class Solution {
    public int maxSumTwoNoOverlap(int[] arr, int l, int m) {
        // write your code here
        int n = arr.length;
        
        int Ls[] = new int[n];
        int Ms[] = new int[n];
        
        int lsum = 0;
        for(int i=0; i <= n - l; i++) {
            if(i == 0) {
                for(int j=0; j < l; j++) {
                    lsum += arr[j];
                }
            }else {
                lsum = lsum + arr[i+l-1] - arr[i-1];
            }
            
            Ls[i] = lsum;
        }
        
        int msum = 0;
        for(int i=0; i <= n - m; i++) {
            if(i == 0) {
                for(int j=0; j < m; j++) {
                    msum += arr[j];
                }
            }else {
                msum = msum + arr[i+m-1] - arr[i-1];
            }
            
            Ms[i] = msum;
        }
        
        int lmax[] = new int[n+1];
        int mmax[] = new int[n+1];
        
        for(int i=n-1; i >= 0; i--) {
            lmax[i] = Math.max(lmax[i+1], Ls[i]);
            mmax[i] = Math.max(mmax[i+1], Ms[i]);
        }
        
        int ans = 0;
        for(int i=0; i <= n-l-1; i++) {
            ans = Math.max(ans, Ls[i] + mmax[i+l]);
        }
        for(int i=0; i <= n-m-1; i++) {
            ans = Math.max(ans, Ms[i] + lmax[i+m]);
        }
        
        return ans;
    }
}




//Solution 2

class Solution {
    public int maxSumTwoNoOverlap(int[] arr, int x, int y) {
        int n = arr.length;
	    int dp1[] = new int[n];
	    int dp2[] = new int[n];
	    int sum = 0;
	    
	    
	    for(int i=0; i < n; i++) {
	        if(i < x) {
	            sum += arr[i];
	            dp1[i] = sum;
	        }else {
	            sum += arr[i] - arr[i-x];
	            dp1[i] = Math.max(dp1[i-1], sum);
	        }
	    }
	    
	    sum = 0;
	    for(int i=n-1; i>= 0; i--) {
	        if(i + y >= n) {
	            sum += arr[i];
	            dp2[i] = sum;
	        }else {
	            sum += arr[i] - arr[i+y];
	            dp2[i] = Math.max(dp2[i+1], sum);
	        }
	    }
	    
	    int ans = 0;
	    for(int i = x-1; i < n-y; i++) {
	        ans = Math.max(ans, dp1[i] + dp2[i+1]);
	    }
	    
	    dp1 = new int[n];
	    dp2 = new int[n];
	    
	    sum=0;
	    for(int i=0; i < n; i++) {
	        if(i < y) {
	            sum += arr[i];
	            dp1[i] = sum;
	        }else {
	            sum += arr[i] - arr[i-y];
	            dp1[i] = Math.max(dp1[i-1], sum);
	        }
	    }
	    
	    sum = 0;
	    for(int i=n-1; i>= 0; i--) {
	        if(i + x >= n) {
	            sum += arr[i];
	            dp2[i] = sum;
	        }else {
	            sum += arr[i] - arr[i+x];
	            dp2[i] = Math.max(dp2[i+1], sum);
	        }
	    }
	    
	    for(int i = y-1; i < n-x; i++) {
	        ans = Math.max(ans, dp1[i] + dp2[i+1]);
	    }
	    
	    
	    return ans;
    }
}
