URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/arrays-and-strings/k-sum-target-sum-unique-set/ojquestion

import java.util.*;

public class Main {

  public static List<List<Integer>> kSum(int[] arr, int target, int k) {
      
      Arrays.sort(arr);
      return kSumHelper(arr, target, k, 0);
      
  }
  
  public static List<List<Integer>> kSumHelper(int arr[], int target, int k, int si) {
      
      if(k == 2) {
          return twoSum(arr, target, si);
      }
      
      List<List<Integer>> res = new ArrayList<>();
      int n = arr.length;
      if(n - si < k) {
          return res;
      }
      
      for(int i = si; i <= n - k; i++) {
          if(i != si && arr[i] == arr[i-1]) {
              continue;
          }
          
          int val1 = arr[i];
          List<List<Integer>> subRes = kSumHelper(arr, target - val1, k - 1, i + 1);
          
          for(List<Integer> li: subRes) {
              li.add(val1);
              res.add(li);
          }
      }
      
      return res;
      
  }
  
  public static List<List<Integer>> twoSum(int arr[], int target, int si) {
      int n = arr.length;
      List<List<Integer>> res = new ArrayList<>();
      if(n - si < 2) {
          return res;
      }
      
      int left = si;
      int right = n-1;
      
      while(left < right) {
          if(left != si && arr[left] == arr[left-1]) {
              left++;
              continue;
          }
          
          int sum = arr[left] + arr[right];
          if(sum == target) {
              List<Integer> subRes = new ArrayList<>();
              subRes.add(arr[left]);
              subRes.add(arr[right]);
              res.add(subRes);
              left++;
              right--;
          }else if(sum > target) {
              right--;
          }else {
              left++;
          }
      }
      
      return res;
  }

  public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    int[] arr = new int[n];
    for (int i = 0; i < n; i++) {
      arr[i] = scn.nextInt();
    }
    int target = scn.nextInt();
    int k = scn.nextInt();
    List<List<Integer>> res = kSum(arr, target, k);
    ArrayList<String> finalResult = new ArrayList<>();
    for (List<Integer> list : res) {
      Collections.sort(list);
      String ans = "";
      for (int val : list) {
        ans += val + " ";
      }
      finalResult.add(ans);
    }
    Collections.sort(finalResult);
    for (String str : finalResult) {
      System.out.println(str);
    }
  }

}
