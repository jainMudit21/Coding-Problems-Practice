URL: https://www.geeksforgeeks.org/magnet-puzzle-backtracking-9/

URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/magnets-official/ojquestion

Solution:

import java.io.*;
import java.util.*;

public class Main {

	public static boolean magnets(char[][] arr, int[] top, int[] left,
int[] bottom, int[] right, int row, int col, char[][] ans) {
    
    // System.out.println("Entered");

    if(col == arr[0].length) {
        row++;
        col = 0;
    }

    if(row == arr.length) {
        if(isAnsValid(ans, top, left, bottom, right)) {
            return true;
        }
        return false;
    }


    if(arr[row][col] == 'L') {

        if(isItSafe(ans, top, left, bottom, right, row, col, '+') && 
        isItSafe(ans, top, left, bottom, right, row, col + 1, '-')) {
            ans[row][col] = '+';
            ans[row][col+1] = '-';
            if(magnets(arr, top, left, bottom, right, row, col + 2, ans)) {
                return true;
            }
            ans[row][col] = 'X';
            ans[row][col + 1] = 'X';
        }

        if(isItSafe(ans, top, left, bottom, right, row, col, '-') && 
        isItSafe(ans, top, left, bottom, right, row, col + 1, '+')) {
            ans[row][col] = '-';
            ans[row][col+1] = '+';
            if(magnets(arr, top, left, bottom, right, row, col + 2, ans)) {
                return true;
            }
            ans[row][col] = 'X';
            ans[row][col + 1] = 'X';
        }

    }else if(arr[row][col] == 'T') {

        if(isItSafe(ans, top, left, bottom, right, row, col, '+') && 
        isItSafe(ans, top, left, bottom, right, row + 1, col, '-')) {
            ans[row][col] = '+';
            ans[row + 1][col] = '-';
            if(magnets(arr, top, left, bottom, right, row, col + 1, ans)) {
                return true;
            }
            ans[row][col] = 'X';
            ans[row + 1][col] = 'X';
        }

        if(isItSafe(ans, top, left, bottom, right, row, col, '-') && 
        isItSafe(ans, top, left, bottom, right, row + 1, col, '+')) {
            ans[row][col] = '-';
            ans[row + 1][col] = '+';
            if(magnets(arr, top, left, bottom, right, row, col + 1, ans)) {
                return true;
            }
            ans[row][col] = 'X';
            ans[row + 1][col] = 'X';
        }

    }


    //not placing anything
    if(magnets(arr, top, left, bottom, right, row, col + 1, ans)) {
        return true;
    }

    return false;
}


public static boolean isItSafe(char[][] ans, int[] top, int[] left, 
int[] bottom, int[] right, int row, int col, char sign) {
    
    // System.out.println("isitsafe");

    if( (col - 1 >= 0 && ans[row][col - 1] == sign)
    || (row - 1 >= 0 && ans[row-1][col] == sign )
    || (col + 1 < ans[0].length && ans[row][col + 1] == sign)) {
        return false;
    }

    //check top, left, bottom, right

    if(sign == '+') {
        int cinr = countInRow(ans, sign, row);
        if(left[row] != -1 && cinr >= left[row]) {
            return false;
        }

        int cinc = countInCol(ans, sign, col);
        if(top[col] != -1 && cinc >= top[col]) {
            return false;
        }
    }else {
        int cinr = countInRow(ans, sign, row);
        if(right[row] != -1 && cinr >= right[row]) {
            return false;
        }

        int cinc = countInCol(ans, sign, col);
        if(bottom[col] != -1 && cinc >= bottom[col]) {
            return false;
        }
    }

    return true;

}



public static boolean isAnsValid(char[][] ans, int[] top, int[] left, int[] bottom, int[] right) {
    
    // System.out.println("isAnsValid");

    for(int row = 0; row < ans.length; row++) {

        int cinr = countInRow(ans, '+', row);
        if(left[row] != -1 && cinr != left[row]) {
            return false;
        }

        cinr = countInRow(ans, '-', row);
        if(right[row] != -1 && cinr != right[row]) {
            return false;
        }
    }

    for(int col = 0; col < ans[0].length; col++) {

        int cinr = countInCol(ans, '+', col);
        if(top[col] != -1 && cinr != top[col]) {
            return false;
        }

        cinr = countInCol(ans, '-', col);
        if(bottom[col] != -1 && cinr != bottom[col]) {
            return false;
        }
    }

    return true;
}


public static int countInRow(char[][] ans, char sign, int row) {
    // System.out.println("countInRow");
    int count = 0;
    for(int i=0; i < ans[0].length; i++) {
        if(ans[row][i] == sign) {
            count++;
        }
    }

    return count;
}


public static int countInCol(char[][] ans, char sign, int col) {
    // System.out.println("countInCol");
    int count = 0;
    for(int i=0; i < ans.length; i++) {
        if(ans[i][col] == sign) {
            count++;
        }
    }

    return count;
}

	public static void print(char[][] arr) {
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int m = scn.nextInt();
		int n = scn.nextInt();
		char[][] arr = new char[m][n];
		for (int i = 0; i < arr.length; i++) {
			String str = scn.next();
			arr[i] = str.toCharArray();
		}
		int[] top = new int[n];
		for (int i = 0; i < n; i++) {
			top[i] = scn.nextInt();
		}
		int[] left = new int[m];
		for (int i = 0; i < m; i++) {
			left[i] = scn.nextInt();
		}
		int[] right = new int[m];
		for (int i = 0; i < m; i++) {
			right[i] = scn.nextInt();
		}
		int[] bottom = new int[n];
		for (int i = 0; i < n; i++) {
			bottom[i] = scn.nextInt();
		}

		//write your code here
		char[][] ans = new char[m][n];
		for(int i=0; i < m; i++) {
		    Arrays.fill(ans[i], 'X');
		}
		
		
		if(!magnets(arr, top, left, bottom, right, 0, 0, ans)) {
		    System.out.println("No Solution");
		    return;
		}
		
		print(ans);
		
	}

	
}
