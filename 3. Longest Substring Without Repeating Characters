URL: https://leetcode.com/problems/longest-substring-without-repeating-characters/

//Easy to understand solution
public int lengthOfLongestSubstring(String str) {
        HashMap<Character, Integer> map = new HashMap<>();
		
		int max = 0;
		int i = -1;
		int j = -1;
		
		while(true) {
		    boolean f1 = false;
		    boolean f2 = false;
		    
            //acquire
		    while(i < str.length()-1) {
		        f1 = true;
		        
		        i++;
		        char ch = str.charAt(i);
		        map.put(ch, map.getOrDefault(ch, 0) + 1);
		        
		        if(map.get(ch) > 1) {
		            break;
		        }
		        //else
		        max = Math.max(max, i-j);
		    }
		    
            //release
		    while(j < i) {
		        f2 = true;
		        
		        j++;
		        char ch = str.charAt(j);
		        map.put(ch, map.get(ch) - 1);
		        
		        if(map.get(ch) == 1) {
		            break;
		        }
		        
		    }
		    
		    if(f1 == false && f2 == false) {
		        break;
		    }
		}
		
		return max;
		
}





//MORE Optimized Solution
public int lengthOfLongestSubstring(String s) {
        int[] chars = new int[128];
        Arrays.fill(chars, -1); // init array
        int left = 0, right = 0;
        int res = 0;
        while(right < s.length()) {
            char c  = s.charAt(right);
            if(chars[c] >= left) { // if current character is in the window, update the window's left border
                left = ++chars[c]; // init arry to -1 to handle the corner case such as "a"
            }
            chars[c] = right; 
            res = Math.max(res, right - left + 1);
            right++;
        }
        
        return res;
}    
