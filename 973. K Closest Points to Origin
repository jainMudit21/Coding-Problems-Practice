//basic solution using heap
URL of problem: https://leetcode.com/problems/k-closest-points-to-origin/

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        
        int ans[][] = new int[k][2];
        
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>(points.length, new sortbyLen());
        
        for(int i = 0; i < points.length; i++) {
            long len = points[i][0]*points[i][0] + points[i][1]*points[i][1];
            
            Pair pair = new Pair(len, points[i][0], points[i][1]);
            pq.add(pair);
        }
        
        
        
        for(int i = 0; i < k; i++) {
            Pair dist = pq.poll();
            ans[i][0] = dist.f;
            ans[i][1] = dist.s;
        }
        
        return ans;
    }
    
    class Pair {
        long len;
        int f;
        int s;
        Pair(long len, int f, int s) {
            this.f = f;
            this.s = s;
            this.len = len;
        }
    }
    
    class sortbyLen implements Comparator<Pair> {
        public int compare(Pair p1, Pair p2) {
            return (int)p1.len - (int)p2.len;
        }
    }
}
