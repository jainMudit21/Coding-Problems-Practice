URL: https://leetcode.com/problems/knight-probability-in-chessboard/

class Solution {
    
    public boolean isValid(int r, int c, int n) {
        if(r>=0 && c>=0 && r<n && c<n)
            return true;
        return false;
    }
    
    public double knightProbability(int n, int k, int r, int c) {
        double curr[][] = new double[n][n];
        double next[][] = new double[n][n];
        
        curr[r][c] = 1;
        
        for(int m=0; m < k; m++) {
            for(int i=0; i < n; i++) {
                for(int j=0; j < n; j++) {
                    int ni=0;
                    int nj=0;
                    
                    if(curr[i][j] != 0) {
                        //8 possible moves
                        ni = i+2;
                        nj = j+1;
                        if(isValid( ni, nj, n)) {
                            next[ni][nj] += curr[i][j] / 8;
                        }
                        
                         ni = i-1;
                         nj = j+2;
                        if(isValid( ni, nj, n)) {
                            next[ni][nj] += curr[i][j] / 8;
                        }
                        
                         ni = i+1;
                         nj = j+2;
                        if(isValid( ni, nj, n)) {
                            next[ni][nj] += curr[i][j] / 8;
                        }
                        
                         ni = i+2;
                         nj = j-1;
                        if(isValid( ni, nj, n)) {
                            next[ni][nj] += curr[i][j] / 8;
                        }
                        
                         ni = i+1;
                         nj = j-2;
                        if(isValid( ni, nj, n)) {
                            next[ni][nj] += curr[i][j] / 8;
                        }
                        
                         ni = i-1;
                         nj = j-2;
                        if(isValid( ni, nj, n)) {
                            next[ni][nj] += curr[i][j] / 8;
                        }
                        
                         ni = i-2;
                         nj = j-1;
                        if(isValid( ni, nj, n)) {
                            next[ni][nj] += curr[i][j] / 8;
                        }
                        
                         ni = i-2;
                         nj = j+1;
                        if(isValid( ni, nj, n)) {
                            next[ni][nj] += curr[i][j] / 8;
                        }
                    }//if(curr[i][j] != 0)
                    
                }//for(int j=0; j<n; j++)
            }//for(int i=0; i < n; i++)
            
            curr = next;
            next = new double[n][n];
            
        }//for(int moves=0; moves<k; moves++)
        
        double sum = 0;
        for(int i=0; i < n; i++) {
            for(int j=0; j < n;j++) {
                sum += curr[i][j];
            }
        }
        
        return sum;
    }
}
