URL: https://www.geeksforgeeks.org/find-maximum-number-possible-by-doing-at-most-k-swaps/

//RECURSIVE SOLUTION
//Time: O((n^2)^k)
//n is length of string and k is number of swaps allowed

URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/largest-number-at-most-k-swaps-official/ojquestion

import java.io.*;
import java.util.*;

public class Main {
    
    public static String swap(String s, int i, int j) {
        char ith = s.charAt(i);
        char jth = s.charAt(j);
        
        String left = s.substring(0, i);
        String mid = s.substring(i+1, j);
        String right = s.substring(j+1);
        
        return left + jth + mid + ith + right;
    }

	static String max;
	public static void findMaximum(String str, int k) {
		//write your code here
		if(str.compareTo(max) > 0) {
		    max = str;
		}
		
		
		if(k == 0) {
		    return;
		}
		
		for(int i=0; i < str.length()-1; i++) {
		    for(int j=i+1; j < str.length(); j++) {
		        if(str.charAt(j) > str.charAt(i)) {
		            //swap and recurse
		            str = swap(str, i, j);
		            findMaximum(str, k-1);
		            str = swap(str, i, j);
		        }
		    }
		}
	}
	
	
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		String str = scn.next();
		int k = scn.nextInt();
		 max = str;
		findMaximum(str, k);
		System.out.println(max);
	}

}





//RECURSIVE EFFICIENT SOLUTION
//TIME: O(n^k)
URL: https://practice.geeksforgeeks.org/problems/largest-number-in-k-swaps-1587115620/1#

// { Driver Code Starts
import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])throws IOException
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int k = sc.nextInt();
                    String str = sc.next();
                    Sol obj = new Sol();
                    System.out.println(obj.findMaximumNum(str, k));
                }
        }
}// } Driver Code Ends


class Sol
{
    public static String findMaximumNum(String str, int k)
        {
            //code here.
            findMaximum(str, k, 0);
            // System.out.println(max);
            String ans = max;
            max = "";
            return ans;
        }
        
    static String max = "";
        
    
    public static void findMaximum(String str, int k, int curIdx) {
		//write your code here
		if(str.compareTo(max) > 0) {
		    max = str;
		  //  System.out.println(max);
		}
		
		
		if(k == 0) {
		    return;
		}
		
		if(curIdx == str.length()) {
		    return;
		}
		
		
		int maxNumIdx = findMax(str, curIdx);
		char maxDig = str.charAt(maxNumIdx);
		
		if(maxNumIdx == curIdx) {
		    findMaximum(str, k, curIdx + 1);
		}else {
		    for(int i=curIdx; i < str.length(); i++) {
		        
		        if(maxDig == str.charAt(i)) {
		            str = swap(str, curIdx, i);
		            findMaximum(str, k-1, curIdx + 1);
		            str = swap(str, curIdx, i);
		        }
		    }
		}
		
		
	}

    public static String swap(String s, int i, int j) {
        char ith = s.charAt(i);
        char jth = s.charAt(j);
        
        String left = s.substring(0, i);
        String mid = s.substring(i+1, j);
        String right = s.substring(j+1);
        
        return left + jth + mid + ith + right;
    }
    
    public static int findMax(String s, int start) {
        if(start == s.length()-1) {
            return start;
        }
        
        int index = start;
        char max = s.charAt(start);
        
        for(int i=start; i < s.length(); i++) {
            if(s.charAt(i) > max) {
                max = s.charAt(i);
                index = i;
            }
        }
        
        return index;
    }

    
}
