/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
     
        
    List<Integer> list2 = new ArrayList<>();
    List<Integer> list1 = new ArrayList<>();
        
        inorder(root1, list1);
        inorder(root2, list2);
        
        return mergeLists(list1, list2);
    }
    
    public List<Integer> mergeLists(List<Integer> list1, List<Integer> list2) {
        List<Integer> list = new ArrayList<>();
        
        int i = 0, j = 0;
        while(i < list1.size() && j < list2.size()) {
            if(list1.get(i) <= list2.get(j)) {
                list.add(list1.get(i));
                i++;
            }
            else {
                list.add(list2.get(j));
                j++;
            }
            
        }
        
        while(i != list1.size()) {
            list.add(list1.get(i));
            i++;
        }
        
        while(j != list2.size()) {
            list.add(list2.get(j));
            j++;
        }
        
        return list;
    }
    
    
    public void inorder(TreeNode root, List<Integer> list1) {
        
        if(root != null) {
            
            inorder(root.left, list1);
            list1.add(root.val);
            inorder(root.right, list1);
        }
    }
}


//still finding optimized solution
