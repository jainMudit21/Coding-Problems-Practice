URL: https://leetcode.com/problems/rotting-oranges/

class Solution {
    public int orangesRotting(int[][] grid) {
      Queue<Pair> q = new LinkedList<>();
      
      int isPossible = 0;
      for(int i=0; i < grid.length; i++) {
          for(int j=0; j < grid[0].length; j++) {
              if(grid[i][j] == 1) {
                  isPossible++;
              }else if(grid[i][j] == 2) {
                  q.add(new Pair(i,j));
              }
          }
      }
      
      if(isPossible == 0) {
          return 0;
      }
      
      int totalTime = -1;
      while(q.isEmpty() == false) {
          int size = q.size();
          totalTime++;
          while(size-- > 0) {
              Pair rp = q.remove();
              for(int i=0; i < dirs.length; i++) {
                  int row = rp.x + dirs[i][0];
                  int col = rp.y + dirs[i][1];
                  
                  if(row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || grid[row][col] != 1) {
                      continue;
                  }
                  
                  grid[row][col] = 2;
                  q.add(new Pair(row, col));
                  isPossible--;
              }
          }
          
      }
      
      if(isPossible == 0) {
          return totalTime;
      }
      
      return -1;
    }
    
    int[][] dirs = {{0,1}, {1, 0}, {-1, 0}, {0, -1}};
    
    class Pair {
        int x;
        int y;

        Pair(int x, int y) {
          this.x = x;
          this.y = y;
        }

    }
}
