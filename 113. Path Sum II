URL: https://leetcode.com/problems/path-sum-ii/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        pathSum(root, targetSum, res, new ArrayList<Integer>());
        return res;
    }
    
    void pathSum(TreeNode root, int targetSum, List<List<Integer>> res, List<Integer> smallAns) {
      
      if(root == null) {
          return;
      }
      
      if(root.left == null && root.right == null) {
          if(targetSum - root.val == 0) {
              List<Integer> base = new ArrayList<>(smallAns);
              base.add(root.val);
              res.add(base);
              return;
          }
      }
      
      smallAns.add(root.val);
      pathSum(root.left, targetSum - root.val, res, smallAns);
      pathSum(root.right, targetSum - root.val, res, smallAns);
      smallAns.remove(smallAns.size() - 1);
      
    }
}
