URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/dynamic-programming/zero-one-knapsack-re-official/ojquestion#


import java.io.*;
import java.util.*;

public class Main {
    
    public static class Pair {
        int i;
        int j;
        String psf;
        
        Pair(int i, int j, String psf) {
            this.i = i;
            this.j = j;
            this.psf = psf;
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());

        int[] values = new int[n];
        String str1 = br.readLine();
        for (int i = 0; i < n; i++) {
            values[i] = Integer.parseInt(str1.split(" ")[i]);
        }

        int[] wts = new int[n];
        String str2 = br.readLine();
        for (int i = 0; i < n; i++) {
            wts[i] = Integer.parseInt(str2.split(" ")[i]);
        }

        int cap = Integer.parseInt(br.readLine());

        //write your code here
        int dp[][] = new int[n+1][cap+1];
        
        for(int i = 0; i< dp.length; i++) {
            
            for(int j = 0; j < dp[0].length; j++) {
                
                if(i == 0 || j == 0) {
                    dp[i][j] = 0;
                    continue;
                }
                
                int val1 = dp[i-1][j];
                int val2= 0;
                if(j >= wts[i-1]) {
                    val2 = values[i-1] + dp[i-1][j-wts[i-1]];
                }
                dp[i][j] = Math.max(val1, val2);
            }
        }
        
        System.out.println(dp[n][cap]);
        
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(n, cap, ""));
        
        while(!q.isEmpty()) {
            Pair p = q.remove();
            if(p.i == 0) {
                System.out.println(p.psf);
                continue;
            }
            
            int exc = dp[p.i-1][p.j];
            if(exc == dp[p.i][p.j]) {
                q.add(new Pair(p.i-1, p.j, p.psf));
            }
            if(p.j >= wts[p.i-1]) {
                int inc = values[p.i-1] + dp[p.i-1][p.j-wts[p.i-1]];
                if(inc == dp[p.i][p.j]) {
                    q.add(new Pair(p.i - 1, p.j - wts[p.i - 1], (p.i-1) + " " + p.psf));
                }
            }
        }
        
    }
}
