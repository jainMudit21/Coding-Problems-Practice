URL: https://leetcode.com/problems/sudoku-solver/
URL: https://practice.geeksforgeeks.org/problems/solve-the-sudoku-1587115621/1#


//Leetcode Solution
class Solution {
    public void solveSudoku(char[][] board) {
        int[] rows = new int[9];
        int[] cols = new int[9];
        int[][] grid = new int[3][3];
        int[][] arr = new int[9][9];
        
        for(int i=0; i < board.length; i++) {
            for(int j=0; j < board.length; j++) {
                if(board[i][j] == '.') {
                    arr[i][j] = 0;
                }else
                    arr[i][j] = board[i][j] - '0';
                
                int digit = arr[i][j];
                rows[i] |= (1 << digit);
                cols[j] |= (1 << digit);
                grid[i / 3][j / 3] |= (1 << digit);
            }
        }
        
        boolean ans = solveSudoku(arr, rows, cols, grid, 0, 0);
        if(ans) {
            for(int i=0;i < arr.length; i++) {
                for(int j=0; j < arr.length; j++) {
                    board[i][j] = Character.forDigit(arr[i][j], 10);
                }
            }
        }
        
    }
    
    public boolean solveSudoku(int arr[][], int rows[], int cols[], int grid[][], int i, int j) {
        if(i == arr.length) {
            // display(arr, true);
            return true;
        }
        
        if(arr[i][j] > 0) {
            //go to next cell
            if(solveSudoku(arr, rows, cols, grid, j == arr.length-1 ? i+1: i, j == arr.length-1 ? 0: j+1)) {
                return true;
            }
        }else {
            for(int num=1; num <= 9; num++) {
                //first check validity of the number then proceed
                if( (rows[i] & (1 << num)) == 0  && (cols[j] & (1 << num)) == 0 && (grid[i/3][j/3] & (1 << num)) == 0) {
                    arr[i][j] = num;
                    rows[i] ^= (1 << num);
                    cols[j] ^= (1 << num);
                    grid[i/3][j/3] ^= (1 << num);
                    if(solveSudoku(arr, rows, cols, grid, j == arr.length-1 ? i+1: i, j == arr.length-1 ? 0: j+1)) {
                        return true;
                    }
                    arr[i][j] = 0;
                    rows[i] ^= (1 << num);
                    cols[j] ^= (1 << num);
                    grid[i/3][j/3] ^= (1 << num);
                }
            }
        }
        
        return false;
    }
}




Leetcode Solution
************************************************************************************************************************
GeeksforGeeks Solution



//GeeksforGeeks Solution
// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Driver_class
{
    public static void main(String args[])
    {
        
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int grid[][] = new int[9][9];
            for(int i = 0; i < 9; i++)
            {
                for(int j = 0; j < 9; j++)
                grid[i][j] = sc.nextInt();
            }
            
            if(new Sudoku().SolveSudoku(grid) == true)
                new Sudoku().printGrid(grid);
            else
                System.out.print("NO solution exists");
            System.out.println();
            
        }
    }
}



// } Driver Code Ends


//User function Template for Java

class Sudoku
{
    static boolean SolveSudoku(int arr[][])
    {
        // add your code here
        
        int[] rows = new int[9];
        int[] cols = new int[9];
        int[][] grid = new int[3][3];
        
        for(int i=0; i < arr.length; i++) {
            for(int j=0; j < arr.length; j++) {
                int digit = arr[i][j];
                rows[i] |= (1 << digit);
                cols[j] |= (1 << digit);
                grid[i / 3][j / 3] |= (1 << digit);
            }
        }
        
        return solveSudoku(arr, rows, cols, grid, 0, 0);
    }
    
    static boolean solveSudoku(int arr[][], int rows[], int cols[], int grid[][], int i, int j) {
        if(i == arr.length) {
            // display(arr, true);
            return true;
        }
        
        if(arr[i][j] > 0) {
            //go to next cell
            if(solveSudoku(arr, rows, cols, grid, j == arr.length-1 ? i+1: i, j == arr.length-1 ? 0: j+1)) {
                return true;
            }
        }else {
            for(int num=1; num <= 9; num++) {
                //first check validity of the number then proceed
                if( (rows[i] & (1 << num)) == 0  && (cols[j] & (1 << num)) == 0 && (grid[i/3][j/3] & (1 << num)) == 0) {
                    arr[i][j] = num;
                    rows[i] ^= (1 << num);
                    cols[j] ^= (1 << num);
                    grid[i/3][j/3] ^= (1 << num);
                    if(solveSudoku(arr, rows, cols, grid, j == arr.length-1 ? i+1: i, j == arr.length-1 ? 0: j+1)) {
                        return true;
                    }
                    arr[i][j] = 0;
                    rows[i] ^= (1 << num);
                    cols[j] ^= (1 << num);
                    grid[i/3][j/3] ^= (1 << num);
                }
            }
        }
        
        return false;
    }
    
    static void printGrid (int arr[][])
    {
        // add your code here
        for (int ii = 0; ii < arr.length; ii++) {
            for (int jj = 0; jj < arr.length; jj++) {
                System.out.print(arr[ii][jj] + " ");
            }
        }
    }
}
