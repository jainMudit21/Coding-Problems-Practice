class Solution {
    public int maxProduct(int[] nums) {
        
        if(nums.length == 0)    return -1;
        
        int currentMin = nums[0]; //keeps track of maximum negative product ending here
        int currentMax = nums[0]; //keeps track of maximum positive product ending here
        int finalMax = nums[0]; // keeps track of maximum product till now
        
        for(int i = 1; i < nums.length; i++) {
            
            int temp = currentMax;
            
            currentMax = Math.max(Math.max(currentMax * nums[i], currentMin * nums[i]), nums[i]);
            
            currentMin = Math.min(Math.min(currentMin * nums[i], temp * nums[i]), nums[i]);
            
            if(finalMax < currentMax) {
                finalMax = currentMax;
            }
        }
        
        return finalMax;
        
    }
}


Solution 2:

class Solution {
    public int maxProduct(int[] nums) {
        
        if(nums.length == 0)    return -1;
        
        int product = 1;
        int res = Integer.MIN_VALUE;
        
        for(int i = 0; i < nums.length; i++) {
            
            product *= nums[i];
            res = Math.max(res, product);
            if(nums[i] == 0)    product = 1;
        }
        product = 1;
        
        for(int i = nums.length-1; i>= 0; i--) {
            product *= nums[i];
            res = Math.max(res, product);
            if(nums[i] == 0)    product = 1;
        }
        
        
        return res;
    }
}
