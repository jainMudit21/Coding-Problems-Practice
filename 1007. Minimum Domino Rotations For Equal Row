URL: https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/



class Solution {
    public int minDominoRotations(int[] tops, int[] bottoms) {
      int c1,c2,c3,c4;
      c1 = c2 = c3 = c4 = 0;
      
      int num1 = tops[0];
      int num2 = bottoms[0];
      
      for(int i=0; i < tops.length; i++) {
          
          //for num1
          //c1 = no. of swaps to make tops as num1
          if(c1 != Integer.MAX_VALUE) {
              
              if(tops[i] == num1) {
                  //nothing to do
              }else if(bottoms[i] == num1) {
                  c1++;
              }else {
                  c1 = Integer.MAX_VALUE;
              }
          }
          //c2 = no. of swaps to make bottoms as num1
          if(c2 != Integer.MAX_VALUE) {
              
              if(bottoms[i] == num1) {
                  //nothing to do
              }else if(tops[i] == num1) {
                  c2++;
              }else {
                  c2 = Integer.MAX_VALUE;
              }
          }
          
          //for num2
          //c3 = no. of swaps to make bottoms as num2
          if(c3 != Integer.MAX_VALUE) {
              
              if(bottoms[i] == num2) {
                  //nothing to do
              }else if(tops[i] == num2) {
                  c3++;
              }else {
                  c3 = Integer.MAX_VALUE;
              }
          }
          
          //c4 = no. of swaps to make tops as num2
          if(c4 != Integer.MAX_VALUE) {
              
              if(tops[i] == num2) {
                  //nothing to do
              }else if(bottoms[i] == num2) {
                  c4++;
              }else {
                  c4 = Integer.MAX_VALUE;
              }
          }
      }
      
      int ans = Math.min(c1, Math.min(c2, Math.min(c3, c4)));
      return ans == Integer.MAX_VALUE ? -1 : ans;
        
    }
}
