URL: https://leetcode.com/problems/nested-list-weight-sum/

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return empty list if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    public int depthSum(List<NestedInteger> obj) {
        // System.out.println(obj);
        int depth = 1;
        return helper(obj, depth);

    }
    
    private int helper(List<NestedInteger> obj, int depth) {
        
        int sum = 0;
        int recursive = 0;
        
        for(int i=0; i < obj.size(); i++) {
            
            NestedInteger inside = obj.get(i);
            if(inside.isInteger()) {
                sum += inside.getInteger();
            }else {
                recursive += helper(inside.getList(), depth + 1);
            }
        }
        
        return recursive + (sum * depth);
    }
    
}
