URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/dynamic-programming/print-all-paths-with-target-sum-subset-official/ojquestion#


import java.io.*;
import java.util.*;

public class Main {

    public static class Pair{
        int i;
        int j;
        String psf;

        public Pair(int i, int j, String psf){
            this.i = i;
            this.j = j;
            this.psf = psf;
        }
    }
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(br.readLine());
        }

        int tar = Integer.parseInt(br.readLine());

        //write your code here
        boolean dp[][]= new boolean[n+1][tar+1];
        
        for(int i = 0; i < dp.length; i++) {
            
            for(int j = 0; j < dp[0].length; j++) {
                
                if(j == 0) {
                    dp[i][j] = true; //anyone can make 0 sum
                }else if(i == 0) {
                    dp[i][j] = false; //no one can make any sum
                }else {
                    if(j >= arr[i-1])
                        dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
                    else
                        dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        System.out.println(dp[n][tar]);
        if(!dp[n][tar]) {
            return;
        }
        
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(n, tar, ""));
        
        while(!q.isEmpty()) {
            Pair rem = q.remove();
            
            if(rem.i == 0 || rem.j == 0) {
                System.out.println(rem.psf);
                continue;
            }
        
            
            if(rem.j >= arr[rem.i-1]){
                
                boolean inc = dp[rem.i-1][rem.j - arr[rem.i - 1]];
                if(inc) {
                    q.add(new Pair(rem.i-1, rem.j - arr[rem.i - 1], (rem.i-1)+ " " + rem.psf));
                }
            }
            
            boolean exc = dp[rem.i-1][rem.j];
            if(exc) {
                q.add(new Pair(rem.i - 1, rem.j, rem.psf));
            }
            
        }
    }
}
