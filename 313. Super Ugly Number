URL: https://leetcode.com/problems/super-ugly-number/

class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        int[] dp = new int[n+1];
        dp[1] = 1;

        int[] pointers = new int[primes.length];
        Arrays.fill(pointers, 1);

        for(int i=2; i <= n; i++) {

          int min = Integer.MAX_VALUE;
          for(int j=0; j < primes.length; j++) {
              min = Math.min(min, primes[j] * dp[pointers[j]]);
          }
          dp[i] = min;
          for(int j=0; j < primes.length; j++) {
              if(min == primes[j] * dp[pointers[j]]) {
                  pointers[j]++;
              }
          }

        }

        return dp[n];
    }
}



//Solution 2 Optimized

class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
      int[] dp = new int[n+1];
      dp[1] = 1;
      
      PriorityQueue<Pair> pq = new PriorityQueue<>();
      
      for(int i=0;i < primes.length; i++) {
          pq.add(new Pair(primes[i], 1, primes[i]));
      }
      
      for(int i=2; i <= n;) {
          
          Pair rp = pq.remove();
          if(dp[i-1] != rp.val) {
              dp[i] = rp.val;
              i++;
              
          }
          
          rp.pointer++;
          rp.val = rp.prime * dp[rp.pointer];
          pq.add(rp);
          
      }
      
      
      return dp[n];
    }
    
    class Pair implements Comparable<Pair> {
      int prime;
      int pointer;
      int val;
      
      Pair(int prime, int pointer, int val) {
          this.prime = prime;
          this.pointer = pointer;
          this.val = val;
      }
      
      public int compareTo(Pair o) {
          return this.val - o.val;
      }
  }
}
