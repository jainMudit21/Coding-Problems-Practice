URL: https://practice.geeksforgeeks.org/problems/friends-pairing-problem5425/1#

/* Two solutions

1. DP Solution returning count of ways
2. Recursive solution printing all ways

*/

//1. DP Solution
import java.io.*;
import java.util.*;

public class Main {
    static int counter = 1;

    public static void solution(int i, int n, boolean[] used, String asf) {
        // write your code here
        if (i > n) {
            System.out.println(counter + "." + asf);
            counter++;
            return;
        }

        if (used[i]) {
            solution(i + 1, n, used, asf);
        } else {
            used[i] = true;
            solution(i + 1, n, used, asf + "(" + i + ") ");
            for (int j = i + 1; j <= n; j++) {
                if (used[j]) continue;
                used[j] = true;
                solution(i + 1, n, used, asf + "(" + i + "," + j + ") ");
                used[j] = false;
            }
            used[i] = false;
        }

    }

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        boolean[] used = new boolean[n + 1];
        solution(1, n, used, "");
    }
}


//2. Recursive Solution
URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/friends-pairing-2-official/ojquestion


import java.io.*;
import java.util.*;

public class Main {
    static int counter = 1;

    public static void solution(int i, int n, boolean[] used, String asf) {
        // write your code here
        if (i > n) {
            System.out.println(counter + "." + asf);
            counter++;
            return;
        }

        if (used[i]) {
            solution(i + 1, n, used, asf);
        } else {
            used[i] = true;
            solution(i + 1, n, used, asf + "(" + i + ") ");
            for (int j = i + 1; j <= n; j++) {
                if (used[j]) continue;
                used[j] = true;
                solution(i + 1, n, used, asf + "(" + i + "," + j + ") ");
                used[j] = false;
            }
            used[i] = false;
        }

    }

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        boolean[] used = new boolean[n + 1];
        solution(1, n, used, "");
    }
}
