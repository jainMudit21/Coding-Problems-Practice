URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/dynamic-programming/minimum-cost-path-re-official/ojquestion#


import java.io.*;
import java.util.*;

public class Main {

   private static class Pair {
      String psf;
      int i;
      int j;

      public Pair(String psf, int i, int j) {
         this.psf = psf;
         this.i = i;
         this.j = j;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      int n = Integer.parseInt(br.readLine());
      int m = Integer.parseInt(br.readLine());
      int[][] arr = new int[n][m];

      for (int i = 0; i < n; i++) {
         String str = br.readLine();
         for (int j = 0; j < m; j++) {
            arr[i][j] = Integer.parseInt(str.split(" ")[j]);
         }
      }

      //write your code here
      //create dp array and then travel that path again
      int dp[][] = new int[n][m];
      dp[n-1][m-1] = arr[n-1][m-1];
      
      for(int i = n-1; i >= 0; i--) {
          
          for(int j = m-1; j>= 0; j--) {
              
              if(i == n-1) {
                  if(j == m-1) 
                      continue;
                dp[i][j] = arr[i][j] + dp[i][j+1];
                  
              }else if(j == m-1) {
                dp[i][j] = arr[i][j] + dp[i+1][j];
                                  
              }else {
                  
                  dp[i][j] = Math.min(dp[i][j+1], dp[i+1][j]);
                  dp[i][j] += arr[i][j];
              }
          }
      }
      
      System.out.println(dp[0][0]);
      
      Queue<Pair> q = new LinkedList<Pair>();
      q.add(new Pair("", 0, 0));
      
      while(!q.isEmpty()) {
          Pair p = q.remove();
          if(p.i == n-1 && p.j == m-1) {
              System.out.println(p.psf);
              continue;
          }
          
          int val = dp[p.i][p.j] - arr[p.i][p.j];
         
          if(p.i+1 < n && dp[p.i+1][p.j] == val) {
              q.add(new Pair(p.psf + "V", p.i+1, p.j));
          }
          if(p.j+1 < m && dp[p.i][p.j+1] == val) {
              q.add(new Pair(p.psf + "H", p.i, p.j+1));
          }
          
      }
      
      
   }

}
