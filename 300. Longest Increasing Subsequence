URL: https://leetcode.com/problems/longest-increasing-subsequence/

Explanation: Picture 10 people standing in a queue with different heights. You have to find the maximum number of people in increasing order of heights.
1. So basically, you will start with 1st person and go along asking yourself should you pick them or not?
How you will decide that?
You need to identify whether picking them would give you better answer or not?

2. For getting the better answer, first you need to store what result they could offer if you pick them?
Create an array of length 10 (size of original array) and initialize them with 0 with 1st element as 1

3. Pick 1st person and as there is no one before him so picking him will lead to answer: 1 (Fill it at index 0) //LOOP START
Go to next person.

4. Check the number of people before him (obviously 1 for 1st iteration). //intialize max as 1
5. Start iterating for every person before this person. //LOOP START
6. Check if the height condition satisfies or not? (i.e. height of person before step 4 is < than person in step 4)
7. If satisfies then find the max out of them.
8. After loop from step 5 ends, store value of max in storage at index of step 4. //LOOP END
9. //LOOP END

return the maximum value from storage array.



class Solution {
    public int lengthOfLIS(int[] arr) {
        int n = arr.length;
        if(n == 0)  
            return 0;
        int ans = 1;
        
        int temp[] = new int[n];
        temp[n-1] = 1;
        for(int i = n-2; i>= 0; i--) {
            int max = 0;
            
            for(int j = i+1; j < n; j++) {
                
                if(arr[j] > arr[i]) {
                    max = Math.max(max, temp[j]);
                }
            }
            
            temp[i] = (max == 0) ? 1: max+1;
            ans = Math.max(ans, temp[i]);
        }
        
        return ans;
    }
}
