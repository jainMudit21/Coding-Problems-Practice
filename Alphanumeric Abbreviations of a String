URL: https://www.geeksforgeeks.org/alphanumeric-abbreviations-of-a-string/

URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/bit-manipulation/abrreviation1-using-bits-official/ojquestion#


//Solution 1: Using BIT MANIPULATION
import java.io.*;
import java.util.*;

public class Main {

    public static void solve(String str) {
        //Number of abbreviations = 2 ^ str.length
        //Math.pow(2, str.length()) == 1 << str.length();
        
        for(int i=0; i < (1 << str.length()); i++) {
            StringBuilder sb = new StringBuilder();
            int count = 0;
            for(int j=0; j < str.length(); j++) {
                char ch = str.charAt(j);
                int b = str.length() - j - 1;
                
                if((i & (1 << b)) == 0) {
                    if(count == 0) {
                        sb.append(ch);
                    }else {
                        sb.append(count);
                        count = 0;
                        sb.append(ch);
                    }
                }else {
                    count++;
                }
            }
            
            //if 1 at the end
            if(count != 0)  sb.append(count);
            System.out.println(sb);
        }
    }

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        solve(str);
    }
}



SOLUTION 2: USING BACKTRACKING
URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/abbreviation-suing-backtracking-official/ojquestion#

/* Approach: Understand the expected output
Input: pep
Output: pep, pe1, p2, p1p, 1ep, 2p, 3, 1e1

See the relation between input and output. Length of input string = 3, Number of abbr. = 2^3 = 8.
Isn't it like subsequence relation. Every character deciding whether it wants to take part or not.

We call function for both choices of a character and whenever we reach end of string( i.e. no more character to process) we print the answer string.

There is 1 slight modification though, whenever the character makes a NO call, it puts a number in its place. Therefore, the number of consecutive
characters taking a NO call will increase count accordingly like in (p2, 3, 2p).

So what, lets take a count variable which will get incremented during NO call.

That means, whenever we want to make a YES call, we can check if count != 0, lets append the count to answer string and make it 0 for next call.

*/

import java.io.*;
import java.util.*;

public class Main {

    public static void solution(String str, String asf, int count, int pos) {
        //write your code here
        if(pos == str.length()) {
            System.out.println(count == 0 ? asf : asf + count);
            return;
        }
        
        //include a char at pos
        String temp = asf;
        temp = (count == 0) ? temp: temp + count;
        temp += str.charAt(pos);
        solution(str, temp, 0, pos + 1);
        
        //dont include char at pos
        solution(str, asf, count + 1, pos + 1);

    }
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        solution(str, "", 0, 0);
    }


}
