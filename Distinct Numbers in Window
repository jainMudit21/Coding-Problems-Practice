URL: https://www.interviewbit.com/problems/distinct-numbers-in-window/

public class Solution {
    public int[] dNums(int[] arr, int k) {
        
        if(k > arr.length) {
            return new int[]{};
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        HashMap<Integer, Integer> hm = new HashMap<>();
        
        for(int i=0; i < k; i++) {
            hm.put(arr[i], hm.getOrDefault(arr[i], 0) + 1);
        }
        ans.add(hm.size());
        
        
        for(int i=k; i < arr.length; i++) {
            hm.put(arr[i-k], hm.get(arr[i-k])-1);
            if(hm.get(arr[i-k]) == 0) {
                hm.remove(arr[i-k]);
            }
            hm.put(arr[i], hm.getOrDefault(arr[i], 0) + 1);
            ans.add(hm.size());
        }
        
        int i=0;
        int res[] = new int[ans.size()];
        for(int x : ans) {
            res[i++] = x;
        }

        return res;
    }
}




URL: https://practice.geeksforgeeks.org/problems/count-distinct-elements-in-every-window/1

// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.util.HashMap;

class GFG
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t > 0)
        {
            int n = sc.nextInt();
            int k = sc.nextInt();
            int a[] = new int[n];
            for (int i = 0; i < n; i++) 
                a[i] = sc.nextInt();
            Solution g = new Solution();
            
            ArrayList<Integer> ans = g.countDistinct(a, n, k);

            for (Integer val: ans) 
                System.out.print(val+" "); 
            System.out.println();
            t--;
        }
    }
}// } Driver Code Ends


class Solution
{
    ArrayList<Integer> countDistinct(int arr[], int n, int k)
    {
        if(k > n) {
            return new ArrayList<Integer>();
        }
        ArrayList<Integer> ans = new ArrayList<>();
	    HashMap<Integer, Integer> hm = new HashMap<>();
	    
	    for(int i=0; i < k; i++) {
	        hm.put(arr[i], hm.getOrDefault(arr[i], 0) + 1);
	    }
	    ans.add(hm.size());
	    
	    
	    for(int i=k; i < arr.length; i++) {
	        hm.put(arr[i-k], hm.get(arr[i-k])-1);
	        if(hm.get(arr[i-k]) == 0) {
	            hm.remove(arr[i-k]);
	        }
	        hm.put(arr[i], hm.getOrDefault(arr[i], 0) + 1);
	        ans.add(hm.size());
	    }
	    

		return ans;
    }
}

