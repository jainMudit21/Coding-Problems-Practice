URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/queens-combinations-2das2d-official/ojquestion

import java.io.*;
import java.util.*;

public class Main {
    
    public static void print(boolean chess[][]) {
        for(int i=0; i < chess.length; i++) {
            for(int j=0; j < chess[0].length; j++) {
                System.out.print(chess[i][j] ? "q\t" : "-\t");
            }
            System.out.println();
        }
        System.out.println();
    }
    

    public static void queensCombinations(int qpsf, int tq, boolean[][] chess, int i, int j){
        // write your code here
        
        if(qpsf == tq) {
            print(chess);
            return;
        }
        
        
        for(int row=i; row < chess.length; row++) {
            for(int col=0; col < chess[row].length; col++) {
                if(row == i && col <= j) {
                    continue;
                }
                
                if(!chess[row][col]) {
                    chess[row][col] = true;
                    queensCombinations(qpsf + 1, tq, chess, row, col);
                    chess[row][col] = false;
                }
            }
        }
        
    }
    
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        boolean[][] chess = new boolean[n][n];
        
        queensCombinations(0, n, chess, 0, -1);
    }
}
