URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/words-klength-words-1-official/ojquestion

import java.io.*;
import java.util.*;

public class Main {

  public static void generateWords(int cc, String ustr, int ssf, int ts, Character[] spots) {
      
      if(cc == ustr.length()) {
          if(ssf == ts) {
              for(int i=0; i < spots.length; i++) {
                  System.out.print(spots[i]);
              }
              System.out.println();
          }
          return;
      }
      
      //we have 2 parameters
      //1. Spots which are empty
      //2. characters which are needed to be placed
      //as spots are less than characters
      //therefore we will place characters as level
      //and spots as options
      
      char ch = ustr.charAt(cc);
      for(int i=0; i < spots.length; i++) {
          if(spots[i] == null) {
              spots[i] = ch;
              generateWords(cc + 1, ustr, ssf + 1, ts, spots);
              spots[i] = null;
          }
      }
      
      //since chars are less therefore they have the choice to not get included
      generateWords(cc + 1, ustr, ssf, ts, spots);
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String str = br.readLine();
    int k = Integer.parseInt(br.readLine());

    HashSet<Character> unique = new HashSet<>();
    String ustr = "";
    for (char ch : str.toCharArray()) {
      if (unique.contains(ch) == false) {
        unique.add(ch);
        ustr += ch;
      }
    }

    Character[] spots = new Character[k];
    generateWords(0, ustr, 0, k, spots);
  }

}
