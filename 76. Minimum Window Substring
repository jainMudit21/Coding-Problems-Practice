URL: https://leetcode.com/problems/minimum-window-substring/

class Solution {
    public String minWindow(String s1, String s2) {
        HashMap<Character, Integer> map2 = new HashMap<>();
		HashMap<Character, Integer> map1 = new HashMap<>();
		
		//frequency map of s2 string
		for(char ch : s2.toCharArray()) {
		    map2.put(ch, map2.getOrDefault(ch, 0) + 1);
		}
		
		String ans = "";
		int i = -1;
		int j = -1;
		int mct = 0; // character match count in substring
		int dmct = s2.length(); //desired char match count
		
		while(true) {
		    boolean f1 = false;
		    boolean f2 = false;
		    
		    //acquire till mct < dmct
		    while(i < s1.length()-1 && mct < dmct) {
		        i++;
		        char c = s1.charAt(i);
		        map1.put(c, map1.getOrDefault(c, 0) + 1);
		        
		        if(map1.get(c) <= map2.getOrDefault(c, 0)) {
		            mct++;
		        }
		        
		        f1 = true;
		    }
		    
		    //select smallest answer and release character
		    while(j < i && mct == dmct) {
		        String temp = s1.substring(j + 1, i + 1);
		        if(ans.length() == 0 || temp.length() < ans.length() ) {
		            ans = temp;
		        }
		        
		        //remove char
		        j++;
		        char c = s1.charAt(j);
		        map1.put(c, map1.getOrDefault(c, 1) - 1);
		        if(map1.get(c) == 0) {
		            map1.remove(c);
		        }
		        
		        //check mct
		        if(map1.getOrDefault(c, 0) < map2.getOrDefault(c, 0)) {
		            mct--;
		        }
		        
		        f2 = true;
		    }
		    
		    //break out of infinite loop if both flags are false
		    if(!f1 & !f2) {
		        break;
		    }
		}
		
		return ans;
    }
}


URL: https://practice.geeksforgeeks.org/problems/smallest-distant-window3132/1#

class Compute {
    public String findSubString( String s) {
        HashSet<Character> hs = new HashSet<>();
        for(char ch :  s.toCharArray() ) {
            hs.add(ch);
        }
        
        StringBuilder sb = new StringBuilder();
        for(Character ch : hs) {
            sb.append(ch);
        }
        
        String s2 = sb.toString();
        
        return utils(s, s2);
    }
    
    public String utils(String s1, String s2) {
		
		HashMap<Character, Integer> map2 = new HashMap<>();
		HashMap<Character, Integer> map1 = new HashMap<>();
		
		//frequency map of s2 string
		for(char ch : s2.toCharArray()) {
		    map2.put(ch, map2.getOrDefault(ch, 0) + 1);
		}
		
		String ans = "";
		int i = -1;
		int j = -1;
		int mct = 0; // character match count in substring
		int dmct = s2.length(); //desired char match count
		
		while(true) {
		    boolean f1 = false;
		    boolean f2 = false;
		    
		    //acquire till mct < dmct
		    while(i < s1.length()-1 && mct < dmct) {
		        i++;
		        char c = s1.charAt(i);
		        map1.put(c, map1.getOrDefault(c, 0) + 1);
		        
		        if(map1.get(c) <= map2.getOrDefault(c, 0)) {
		            mct++;
		        }
		        
		        f1 = true;
		    }
		    
		    //select smallest answer and release character
		    while(j < i && mct == dmct) {
		        String temp = s1.substring(j + 1, i + 1);
		        if(ans.length() == 0 || temp.length() < ans.length() ) {
		            ans = temp;
		        }
		        
		        //remove char
		        j++;
		        char c = s1.charAt(j);
		        map1.put(c, map1.getOrDefault(c, 1) - 1);
		        if(map1.get(c) == 0) {
		            map1.remove(c);
		        }
		        
		        //check mct
		        if(map1.getOrDefault(c, 0) < map2.getOrDefault(c, 0)) {
		            mct--;
		        }
		        
		        f2 = true;
		    }
		    
		    //break out of infinite loop if both flags are false
		    if(!f1 & !f2) {
		        break;
		    }
		}
		
		return ans;
    }
}
