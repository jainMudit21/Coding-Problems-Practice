URL: https://leetcode.com/problems/balance-a-binary-search-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode balanceBST(TreeNode root) {
        if(root == null)
            return null;
        
        
        ArrayList<Integer> list = new ArrayList<>();
        inorder(root, list);
        
        return createBST(list, 0, list.size() - 1);
    }
    
    TreeNode createBST(ArrayList<Integer> list, int si, int ei) {
        if(si > ei)
            return null;
        
        int mid = si + (ei - si)/2;
        
        TreeNode node = new TreeNode(list.get(mid));
        node.left = createBST(list, si, mid - 1);
        node.right = createBST(list, mid + 1, ei);
        
        return node;
        
    }
    
    void inorder(TreeNode root, ArrayList<Integer> list) {
        if(root == null)
            return;
        
        inorder(root.left, list);
        list.add(root.val);
        inorder(root.right, list);
    }
    

}
