URL: https://practice.geeksforgeeks.org/problems/swap-all-odd-and-even-bits/0#

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
	public static void main (String[] args) throws IOException
	 {
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(br.readLine());
	    while(t-->0) {
	        int n = Integer.parseInt(br.readLine());
	        System.out.print(swap(n) +"\n");
	    }
	 }
	 
	 public static int swap(int n) {
	     int oddMask = 0x55555555; //5 is stored as 0101, so repeating it 8 times will form 32 bits
        int evenMask = 0xAAAAAAAA; //A is stored as 1010
        
        //STEP 1: Once we have our masks, we can extract odd and even bits from the number
        //STEP 2: After extracting, shift odd with 1 bit left and shift even with 1 bit right
        //STEP 3: OR the 2 nums formed in previous step and you find your answer.
        
        int oddBits = (oddMask & n);
        int evenBits = (evenMask & n);
        
        oddBits = oddBits << 1;
        evenBits = evenBits >> 1;
        
        return ((oddBits | evenBits));
	 }
}
