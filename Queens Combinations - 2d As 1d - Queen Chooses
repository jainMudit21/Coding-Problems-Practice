URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/queens-combinations-2das1d-queen-chooses-official/ojquestion

import java.io.*;
import java.util.*;

public class Main {

    public static void queensCombinations(int qpsf, int tq, boolean[][] chess, int lcno) {
        // write your code here
        if(qpsf == tq) {
            for(int i=0; i < chess.length; i++) {
                for(int j=0; j < chess[0].length; j++) {
                    System.out.print(chess[i][j] ? "q\t" : "-\t");
                }
                System.out.println();
            }
            System.out.println();
            return;
        }
        
        
        for(int cell = lcno + 1; cell < chess.length * chess.length; cell++) {
            
            int row = cell / chess.length;
            int col = cell % chess.length;
            
            chess[row][col] = true;
            queensCombinations(qpsf + 1,tq, chess, cell);
            chess[row][col] = false;
        }
        
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        boolean[][] chess = new boolean[n][n];

        queensCombinations(0, n, chess, -1);
    }
}
