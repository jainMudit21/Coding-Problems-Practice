URL: https://leetcode.com/problems/shortest-distance-from-all-buildings/

class Solution {
    private int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    public int shortestDistance(int[][] grid) {
        
        if(grid == null || grid.length== 0)
            return -1;
        
        int rows = grid.length;
        int cols = grid[0].length;
        
        int[][] buildingsReached = new int[rows][cols];//no of buildings reached
        int[][] distance = new int[rows][cols];
        int totalBuildings = 0;
        
        for(int i=0; i < rows; i++) {
            for(int j=0; j < cols; j++) {
                if(grid[i][j] == 1) {
                    if(!bfs(grid, i, j, buildingsReached, distance))
                        return -1;
                    totalBuildings++;
                }
            }
        }
        
        int minDist = Integer.MAX_VALUE;
        for(int i=0; i < rows; i++) {
            for(int j=0; j < cols; j++) {
                if(totalBuildings == buildingsReached[i][j] && distance[i][j] < minDist) {
                    minDist = distance[i][j];
                }
            }
        }
        
        return minDist == Integer.MAX_VALUE ? -1 : minDist;
    }
    
    private boolean bfs(int[][] grid, int row, int col, int[][] buildingsReached, int[][] distance) {
        
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{row, col});
        int dist = 0;
        
        boolean[][] vis = new boolean[grid.length][grid[0].length];
        vis[row][col] = true;
        
        while(q.size() != 0) {
            int size = q.size();
            dist++;
            
            while(size-- > 0) {
                int[] rem = q.remove();
                
                for(int[] dir: dirs) {
                    int r = rem[0] + dir[0];
                    int c = rem[1] + dir[1];
                    
                    if(!isValid(grid, r, c, vis))
                        continue;
                    
                    if(grid[r][c] == 0) {
                        buildingsReached[r][c]++;
                        distance[r][c] += dist;
                        q.add(new int[]{r, c});
                    }
                    
                    vis[r][c] = true;
                }
            }
        }
        
        //if a building exists and has not been visited from grid[row][col], that means, there is no
        //answer which can pass through both the buildings
        for(int i=0; i < grid.length; i++) {
            for(int j=0; j < grid[0].length; j++) {
                if(grid[i][j] == 1 && vis[i][j] == false) {
                    return false;
                }
            }
        }
        
        return true;
    }
    
    private boolean isValid(int[][] grid, int r, int c, boolean[][] vis) {
        if(r < 0 || c < 0 || r >= grid.length || c >= grid[0].length)
            return false;
        if(vis[r][c])
            return false;
        if(grid[r][c] == 2)
            return false;
        
        return true;
    }
    
}
