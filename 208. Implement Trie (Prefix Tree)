URL: https://leetcode.com/problems/implement-trie-prefix-tree/

class Trie {

    /** Initialize your data structure here. */
    private class Node {
        Node[] childs;
        boolean isEnd;
        
        Node() {
            childs = new Node[26];
        }
    }
    
    final private Node root;
    
    
    public Trie() {
        root = new Node();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node curr = root;
        for(int i=0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if(curr.childs[ch-'a'] == null) {
                curr.childs[ch - 'a'] = new Node();
            }
            curr = curr.childs[ch - 'a'];
        }
        curr.isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node curr = root;
        
        for(int i=0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if(curr.childs[ch-'a'] == null) {
                return false;
            }
            curr = curr.childs[ch - 'a'];
        }
        
        return curr.isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String word) {
        Node curr = root;
        
        for(int i=0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if(curr.childs[ch-'a'] == null) {
                return false;
            }
            curr = curr.childs[ch - 'a'];
        }
        
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
