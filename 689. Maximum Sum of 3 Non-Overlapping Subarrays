URL: https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/

class Solution {
    public int[] maxSumOfThreeSubarrays(int[] arr, int k) {
        int n = arr.length;
		int[] left = new int[n];
		int[] right = new int[n];
		int[] psum = new int[n];
		
		for(int i=0; i < n; i++) {
		    if(i == 0) {
		        psum[i] = arr[i];
		    }else {
		        psum[i] = psum[i-1] + arr[i];
		    }
		}
		
		
		int sum = 0;
		for(int i=0; i < n; i++) {
		    if(i < k) {
		        sum += arr[i];
		        left[i] = sum;
		    }else {
		        sum += arr[i] - arr[i - k];
		        left[i] = Math.max(left[i - 1], sum);
		    }
		}
		
		sum = 0;
		for(int i=n-1; i >= 0; i--) {
		    if(i + k >= n) {
		        sum += arr[i];
		        right[i] = sum;
		    }else {
		        sum += arr[i] - arr[i + k];
		        right[i] = Math.max(right[i + 1], sum);
		    }
		}
		
		
		int maxSum = 0;
		int lsum = 0;
		int rsum = 0;
		int spmsa = -1;//starting point of middle sub array
		for(int i = k; i <= n - 2*k; i++) {
		    if(maxSum < left[i - 1] + right[i + k] + psum[i + k - 1] - psum[i - 1]) {
		        maxSum = left[i - 1] + right[i + k] + psum[i + k - 1] - psum[i - 1];
		        spmsa = i;
		        lsum = left[i - 1];
		        rsum = right[i + k];
		    }
		}
		
        int ans[] = new int[3];
		
		System.out.print(maxSum + " ");
		
		
		for(int i = k - 1; i < spmsa; i++) {
		    if(psum[i] - (i - k < 0 ? 0 : psum[i - k]) == lsum) {
		        // System.out.print((i - k + 1) + " ");
                ans[0] = i-k+1;
		        break;
		    }
		}
		
		ans[1] = spmsa;
        // System.out.print(spmsa + " ");
		
		
		for(int i = spmsa + (2*k - 1); i < n; i++) {
		    if(psum[i] - psum[i - k] == rsum) {
		        // System.out.print((i - k + 1) + " ");
                ans[2] = i - k + 1;
		        break;
		    }
		}
        
        return ans;
    }
}
