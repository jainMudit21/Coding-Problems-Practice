/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
        
        int depth = 0;
        sumDeep(root, depth, map);
        
        int sum1 = 0;
        Iterator itr = map.entrySet().iterator();
        int size = map.size();
        int count = 1;
        // boolean flag = true;
        while(itr.hasNext()) {
            Map.Entry entry = (Map.Entry) itr.next();
            if(count == size)  {
                String value = entry.getValue().toString();
                int index1 = value.indexOf('[');
                int index2 = value.indexOf(']');
                value = value.substring(index1+1, index2);
                String strs[] = value.trim().split(",");
                for(int i = 0; i < strs.length; i++) {
                    sum1 += Integer.parseInt(strs[i].trim());
                }
            }
            count++;
        }
        // System.out.println(sum1+"   "+sum2);
        
        return sum1;
    }
    
    public void sumDeep(TreeNode root, int depth, HashMap<Integer, ArrayList<Integer>> map) {
        if(root == null) {
            return;
        }
        
        if(root.left == null && root.right == null) {
            
            if(!map.containsKey(depth)) {
                
                ArrayList<Integer> list = new ArrayList<>();
                list.add(root.val);
                
                map.put(depth, list);
                
            }
            
            else {
                ArrayList<Integer> list = map.get(depth);
                list.add(root.val);
                
                map.put(depth, list);
            }
        }
        
        sumDeep(root.left, depth + 1, map);
        sumDeep(root.right, depth + 1, map);
        
    }
}
