URL: https://leetcode.com/problems/making-a-large-island/

class Solution {
    
    int[][] dirs = {{0,1}, {1,0}, {0,-1}, {-1,0}};
    
    public int largestIsland(int[][] grid) {
        
        if(grid == null || grid.length == 0)
            return -1;
        
        int r = grid.length;
        int c = grid[0].length;
        
        int[][] islands = new int[r][c];
        HashMap<Integer, Integer> map = new HashMap<>();// id of island -> size
        
        int id = 2;
        for(int i=0; i < r; i++) {
            for(int j=0; j < c; j++) {
                if(grid[i][j] == 1 && islands[i][j] == 0) {
                    size = 1;
                    dfs(grid, i, j, islands, id, map);
                    id++;
                }
            }
        }
        
        int max = 0;
        for(int key: map.keySet()) 
            max = Math.max(max, map.get(key));
        
        
        for(int i=0; i < r; i++) {
            for(int j=0; j < c; j++) {
                if(grid[i][j] == 0) {
                    int count = 0;
                    HashSet<Integer> ids = new HashSet<>();
                    
                    for(int dir[]: dirs) {
                        int row = i + dir[0];
                        int col = j + dir[1];
                        
                        if(row < 0 || col < 0 || row >= grid.length || col >= grid[0].length)
                            continue;
                        
                        if(grid[row][col] == 0)
                            continue;
                        
                        if(!ids.contains(islands[row][col])) {
                            ids.add(islands[row][col]);
                            count += map.get(islands[row][col]);
                        }
                    }
                    max = Math.max(max, count + 1);
                }
            }
        }
        
        return max;
        
    }
    
    int size = 1;
    
    void dfs(int[][] grid, int r, int c, int[][] islands, int id, HashMap<Integer, Integer> map) {
        
        if(r < 0 || c < 0 || r >= grid.length || c >= grid[0].length || grid[r][c] == 0 || islands[r][c] != 0) {
            size--;
            return;
        }
        
        if(map.getOrDefault(id, 0) < size) {
            map.put(id, size);
        }
        
        islands[r][c] = id;
        
        for(int[] dir: dirs) {
            int row = r + dir[0];
            int col = c + dir[1];
            size++;
            dfs(grid, row, col, islands, id, map);
        }
    }
    
}
