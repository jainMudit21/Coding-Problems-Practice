URL: https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/queens-permutations-2das2d-queen-chooses-official/ojquestion

import java.io.*;
import java.util.*;

public class Main {
    
    public static void print(int chess[][]) {
        
        for(int i=0; i < chess.length; i++) {
            for(int j=0; j < chess[0].length; j++) {
                if(chess[i][j] == 0) {
                    System.out.print("-\t");
                    continue;
                }
                System.out.print("q"+chess[i][j]+"\t");
            }
            System.out.println();
        }
        
    }

    public static void queensPermutations(int qpsf, int tq, int[][] chess){
        
        if(qpsf >= tq) {
            print(chess);
            System.out.println();
            return;
        }
        
        for(int i=0; i < chess.length; i++) {
            for(int j=0; j < chess[i].length; j++) {
                if(chess[i][j] == 0) {
                    chess[i][j] = qpsf + 1;
                    queensPermutations(qpsf + 1, tq, chess);
                    chess[i][j] = 0;
                }
            }
        }
    }
    
    
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[][] chess = new int[n][n];
        
        queensPermutations(0, n, chess);
    }
}
