URL: https://leetcode.com/problems/max-consecutive-ones-iii/

class Solution {
    public int longestOnes(int[] arr, int k) {
        int j = -1;
        int count = 0;
        int ans = 0;
        
        for(int i=0; i < arr.length; i++) {
            if(arr[i] == 0) {
                count++;
            }
            
            while(count > k) {
                j++;
                if(arr[j] == 0) {
                    count--;
                }
            }
            
            ans = Math.max(ans, i-j);
        }
        return ans;
    }
}






URL: https://practice.geeksforgeeks.org/problems/maximize-number-of-1s0905/1#

class Solve {
    // m is maximum of number zeroes allowed to flip
    int findZeroes(int arr[], int n, int k) {
        int j = -1;
        int count = 0;
        int ans = 0;
        
        for(int i=0; i < arr.length; i++) {
            if(arr[i] == 0) {
                count++;
            }
            
            while(count > k) {
                j++;
                if(arr[j] == 0) {
                    count--;
                }
            }
            
            ans = Math.max(ans, i - j);
        }
        
        return ans;
    }
}
